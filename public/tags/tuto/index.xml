<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tuto&#34; on Vozec&#39;s Blog</title>
    <link>https://vozec.fr/tags/tuto/</link>
    <description>Recent content in tuto&#34; on Vozec&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Sep 2022 12:00:00 +0000</lastBuildDate><atom:link href="https://vozec.fr/tags/tuto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oracle Tranquille 1&amp;2 | hackademint CTF 2022 | Catégorie Crypto | [Vozec/FR]</title>
      <link>https://vozec.fr/writeups/oracle-rsa-hackademint/</link>
      <pubDate>Mon, 19 Sep 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/oracle-rsa-hackademint/</guid>
      <description>Oracle Tranquille 1&amp;amp;2 | Hackademint 2022 Nécessaires Python3 + Pwntools Descriptions : Challenge 1 : Nous avons trouvé un étrange service ouvert sur un de nos services hier. Complot des Illuminati? Prise de pouvoir des machines ? Opération marketing pour la sortie du prochain album de Justin Bieber ? Simple Oracle de déchiffrement RSA? Difficile de trancher. Pourriez-vous y jeter un coup d&amp;#39;œil? Challenge 2 : Le serveur semble avoir évolué depuis votre dernière enquête !</description>
    </item>
    
    <item>
      <title>Présentation de l&#39;attaque &#39;Padding Oracle&#39; sur de l&#39;AES ECB</title>
      <link>https://vozec.fr/articles/attaque-oracle-padding-aes_ecb/</link>
      <pubDate>Mon, 19 Sep 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/attaque-oracle-padding-aes_ecb/</guid>
      <description>Introduction L&amp;rsquo;AES (&amp;ldquo;Advanced Encryption Standard&amp;rdquo;) est un chiffrement par blocs utilisé de nos jours dans la sécurité informatique. Il repose sur le chiffrement d&amp;rsquo;information découpé en plusieurs blocs et le chiffrement de ces blocs peuvent être fait de plusieurs manières selon la configuration du système. Ainsi il en existe plusieurs modes :
ECB CBC CFB OFB CTR CTS &amp;hellip; Aujourd’hui, nous allons aborder une attaque présente sur l&amp;rsquo;AES en mode ECB .</description>
    </item>
    
    <item>
      <title>Lutter contre la triche en CTF ?</title>
      <link>https://vozec.fr/articles/anti-cheat-ctf/</link>
      <pubDate>Tue, 23 Aug 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/anti-cheat-ctf/</guid>
      <description>Introduction Dans cet article , je vais présenter les différentes possibilités pour empêcher la triche en compétition et notamment sur des ctf basés sur CTFd . Je précise que ces techniques permettent de mettre en avant les comptes suspects. Il y a plusieurs façons de cocher les cases d&amp;rsquo;un tricheurs si on suis ces critères bêtement et inversement , il y a malheureusement plusieurs façon de contourner ces protections.
Tous ce que je vais expliquer ici sert donc à mettre en avant un compte ou une équipe afin que des admins procède à une vérification manuelle et agissent en conséquence.</description>
    </item>
    
    <item>
      <title>Writeup All Reverse Challenges CTF 2022 | PwnMe 2022 Edition</title>
      <link>https://vozec.fr/writeups/reverse-challenge-ctf-pwnme2022/</link>
      <pubDate>Mon, 04 Jul 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/reverse-challenge-ctf-pwnme2022/</guid>
      <description>Description Le CTF propose 5 Challenges de reverse :
2 de Bryton#2690 1 de express#7904 1 de kostadin#0792 Prérequis IDA Connaissances basiques de CTF It&amp;rsquo;s easy Nom : It&amp;rsquo;s easy Point : 50 Description : Can you find the secret in this binary ? File : ez Solution : On peut regarder les strings présentes dans le binaire :
[writeup/file]$ rabin2 -z ez [Strings] nth paddr vaddr len size section type string ――――――――――――――――――――――――――――――――――――――――――――――――――――――― 0 0x00002008 0x00002008 37 38 .</description>
    </item>
    
    <item>
      <title>Writeup Intrinsec CTF 2022 | leHack 2022 Edition</title>
      <link>https://vozec.fr/writeups/intrinsec-ctf-lehack2022/</link>
      <pubDate>Thu, 30 Jun 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/intrinsec-ctf-lehack2022/</guid>
      <description>Description Ce CTF est proposé par Intrinsec , crée par Th1b4ud et est constitué de 12 Challenges. On évolue tout au long des objectifs dans un réseau afin de compromettre toutes les machines les unes après les autres.
Thèmes Web Pivoting Blockchain (SmartContract) Forensic Prérequis Du temps Un vps de préférence Connaissance basique de CTF *J&amp;rsquo;ai appris beaucoup de choses pendant la compétition et c&amp;rsquo;est assez facile à comprendre en faisant les challenges en parallèles.</description>
    </item>
    
    <item>
      <title>Writeup RustyTheClown | leHack 2022 | Catégorie reverse</title>
      <link>https://vozec.fr/writeups/rustytheclown-lehack2022/</link>
      <pubDate>Sun, 26 Jun 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/rustytheclown-lehack2022/</guid>
      <description>RustyTheClown 2 | leHack CTF 2022 Fichier(s) RustyTheClown Nécessaires IDA/Ghidra Python3 Flag lh_68eca3c515dbefd71ec8fec3849ba0083af806447d9f9f7cdca2a5cc Solution détaillée Analyse Statique Le challenge est un crackme . On nous demande un mot de passe et celui est modifié puis comparé avant de nous donner ou non le flag .
Désassemblons le binaire dans IDA :
Dans void rustyTheClown::main::hecc4c87ee1b9aeab() voici ce qu&amp;rsquo;on trouve d&amp;rsquo;important :
std::io::stdio::Stdin::read_line::hd0723957e63cf850(); if ( &amp;amp;unk_52408 ) core::ptr::drop_in_place$LT$std..io..error..Error$GT$::h815d6777c4f5f9e1(*((_QWORD *)&amp;amp;dest + 1)); v4 = 0LL; v3 = 1uLL; _$LT$core.</description>
    </item>
    
    <item>
      <title>Mod ctfauth | Bsidessf 2022 | Catégorie Reverse | [Vozec/FR]</title>
      <link>https://vozec.fr/writeups/mod_ctfauth-bsidessf-2022/</link>
      <pubDate>Fri, 10 Jun 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/mod_ctfauth-bsidessf-2022/</guid>
      <description>Mod ctfauth | Tjctf 2022 Fichier(s) Challenge files Challenge files Nécessaires Python3 + Ida + Ghidra Flag CTF{http_headers_amiright} Solution détaillée Partie 1: Découverte du challenge Ce challenge mélange un peu de Web et une majorité de reverse. Deux fichiers sont fournis,
Une configuration apache2 Un fichier .so Le lien d&amp;rsquo;un site web (Hébergé en local pour le writeup) Voici ce que nous avons quand nous nous rendons sur le site :</description>
    </item>
    
    <item>
      <title>Présentation de l&#39;attaque &#39;Bit Flipping&#39; sur de l&#39;AES CBC</title>
      <link>https://vozec.fr/articles/attaque-bit-flipping-aes_cbc/</link>
      <pubDate>Wed, 25 May 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/attaque-bit-flipping-aes_cbc/</guid>
      <description>Introduction L&amp;rsquo;AES (&amp;ldquo;Advanced Encryption Standard&amp;rdquo;) est un chiffrement par blocs utilisé de nos jours dans la sécurité informatique. Il repose sur le chiffrement d&amp;rsquo;information découpé en plusieurs blocs et le chiffrement de ces blocs peuvent être fait de plusieurs manières selon la configuration du système . Ainsi il en existe plusieurs modes :
ECB CBC CFB OFB CTR CTS &amp;hellip; Aujourd&amp;rsquo;hui , nous allons aborder une attaque présente sur l&amp;rsquo;AES en mode CBC .</description>
    </item>
    
    <item>
      <title>Eyes Closed | Hackrocks &amp; HackArmour CTF 2022 | Catégorie Pwn | [Vozec/FR] &amp; [Electro/FR]</title>
      <link>https://vozec.fr/writeups/eyes_closed-hackarmour-2022/</link>
      <pubDate>Sun, 22 May 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/eyes_closed-hackarmour-2022/</guid>
      <description>Eyes Closed | Hackrocks &amp;amp; HackArmour CTF 2022 Necessaires Netcat Python3 (+ pwntool) Flag flag{br0p0p0p0p0_with_f0rm4t_$7ringggg} Solution détaillée Le but du challenge est d&amp;rsquo;exploiter une format string puis d&amp;rsquo;utiliser un buffer overflow pour ainsi construire une ropchain et ainsi pouvoir prendre le contrôle du binaire grâce à une attaque ret2libc.
Un peu d&amp;rsquo;explication : La méthode finale est la même que dans un de mes précédents article . Ce Writeup va donc se focaliser sur la partie Blind du challenge ainsi que l&amp;rsquo;exploitation des formats strings</description>
    </item>
    
    <item>
      <title>Factor Master | tjctf 2022 | Catégorie Crypto | [Vozec/FR] &#43; [Eletro/FR] </title>
      <link>https://vozec.fr/writeups/factormaster-tjctf-2022/</link>
      <pubDate>Sun, 15 May 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/factormaster-tjctf-2022/</guid>
      <description>Factor Master | Tjctf 2022 Fichier(s) Challenge files Necessaires Python3 + Pwntools Flag tjctf{S0_y0u_r34lly_c4n_F4c7t0r_4ny7th1nG_c36f63cfe73c} Solution détaillée Le challenge se décompose en 3 parties : 3 fois le serveur va nous fournir un nombre et nous allons devoir le factoriser en 2 produits de nombres premiers ; à la manière d&amp;rsquo;un chiffrement RSA.
Commencons directement avec la première étape:
Etape 1 : def challenge1(): p = getPrime(44) q = getPrime(1024) n = p * q return [p, q], n On remarque tous de suite de p est bien plus petit que q .</description>
    </item>
    
    <item>
      <title>Vacation2 | Tjctf 2022 | Catégorie Pwn</title>
      <link>https://vozec.fr/writeups/vacation2-tjctf-2022/</link>
      <pubDate>Sun, 15 May 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/vacation2-tjctf-2022/</guid>
      <description>Vacation2 | Tjctf 2022 Fichier(s) Challenge files Necessaires Netcat Python3 (+ pwntool) Flag tjctf{w3_g0_wher3_w3_w4nt_t0!_66f7020620e343ff} Solution détaillée Le but du challenge est d&amp;rsquo;exploiter un buffer overflow pour ainsi construire une ropchain et ainsi pouvoir prendre le contrôle du binaire grâce à une attaque ret2libc.
Un peu d&amp;rsquo;explication : Voici la source du challenge :
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void vacation() { char buf[16]; puts(&amp;#34;Where am I going today?&amp;#34;); fgets(buf, 64, stdin); } void main() { setbuf(stdout, NULL); vacation(); puts(&amp;#34;hmm.</description>
    </item>
    
    <item>
      <title>Lucky | TamuCtf 2022 | Catégorie Pwn | [Vozec/FR] </title>
      <link>https://vozec.fr/writeups/lucky-tamuctf-2022/</link>
      <pubDate>Tue, 19 Apr 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/lucky-tamuctf-2022/</guid>
      <description>Fichier(s) Lucky Lucky.c Nécessaires Python3 (+ pwntool) Flag gigem{un1n1t14l1z3d_m3m0ry_15_r4nd0m_r1ght} Solution détaillée Le but du challenge est de sauter dans une fonction Win qui fait pop le flag :
void win() { char flag[64] = {0}; FILE* f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;); fread(flag, 1, sizeof(flag), f); printf(&amp;#34;Nice work! Here&amp;#39;s the flag: %s\n&amp;#34;, flag); } Malheureusement , un ret2win semble difficile à cause de :
Un fget sécurisé : fgets(buf, sizeof(buf), stdin); La randomisation des adresses grâce à l&amp;rsquo;aslr Regardons le Main : int main() { setvbuf(stdout, NULL, _IONBF, 0); welcome(); srand(seed()); int key0 = rand() == 306291429; int key1 = rand() == 442612432; int key2 = rand() == 110107425; if (key0 &amp;amp;&amp;amp; key1 &amp;amp;&amp;amp; key2) { win(); } else { printf(&amp;#34;Looks like you weren&amp;#39;t lucky enough.</description>
    </item>
    
    <item>
      <title>Python from 0</title>
      <link>https://vozec.fr/articles/python-from-0/</link>
      <pubDate>Wed, 16 Mar 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/python-from-0/</guid>
      <description>Les Variables : Il existe des centaines de type de variables mais les principales sont :
Les String (&amp;lsquo;chaine de caractère&amp;rsquo;) :
msg = &amp;#34;Hello World&amp;#34; Les Int (&amp;lsquo;Integers&amp;rsquo;) : Ce sont les nombres entiers
nbr = 2021 * 4 Les Float : Les nombres décimaux
flt = 3.14159265359 Les List : Les listes contiennent des &amp;lsquo;object&amp;rsquo; de tous types:
lst = [&amp;#34;Hello World&amp;#34;,5,3.14,[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;],9] Les Dict &amp;lsquo;Dictionnaires&amp;rsquo; : Associent à un objet , une valeur :</description>
    </item>
    
    <item>
      <title>Algorithm | DefCamp 2022 | Catégorie Crypto | [Vozec/FR] </title>
      <link>https://vozec.fr/writeups/algorithm-defcamp-2022/</link>
      <pubDate>Sat, 12 Feb 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/algorithm-defcamp-2022/</guid>
      <description>Fichier(s) Chall.py Flag_enc Nécessaires Python3 Flag CTF{267a4401ea64e7167168969743dcc708399e3823d40e4ae37c78d675e281cb14} Description Hello friends. Just a regular algorithm Flag format: CTF{sha256(message_decrypt)}
Solution détaillée Dans Flag_enc on retrouve le flag chiffré : 242712673639869973827786401934639193473972235217215301
Analysons le chiffrement dans chall.py :
flag = &amp;#39; [test]&amp;#39; hflag = flag.encode(&amp;#39;hex&amp;#39;) iflag = int(hflag[2:], 16) def polinom(n, m): i = 0 z = [] s = 0 while n &amp;gt; 0: if n % 2 != 0: z.append(2 - (n % 4)) else: z.</description>
    </item>
    
    <item>
      <title>Writeup Herald | Insomnihack 2022 | Catégorie reverse | [Vozec/FR] </title>
      <link>https://vozec.fr/writeups/herald-insomnihack-ctf-2022/</link>
      <pubDate>Sun, 30 Jan 2022 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/herald-insomnihack-ctf-2022/</guid>
      <description>Fichier(s) Herald.apk Nécessaires Un téléphone Android Apk-signer Apktool Jdax Flag INS{Y0u_Kn0W_aB0uT_Th3_Her4ld_0F_the_G0ds?} Description Our lab administrator has just passed out from a strange virus. Please help us find the password to his messaging app so we can identify what he was working on and save his life. Solution détaillée La première chose que j&amp;rsquo;ai faite et de mettre mon fichier apk dans Jdax pour voir le code source est commencé à reverse :</description>
    </item>
    
    <item>
      <title>Execution de ShellCode grâce au Dll Hidjacking</title>
      <link>https://vozec.fr/articles/pourquoi-vous-devez-s%C3%A9curiser-vos-dll-2/</link>
      <pubDate>Sun, 05 Dec 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/pourquoi-vous-devez-s%C3%A9curiser-vos-dll-2/</guid>
      <description>Introduction Nous avons déjà parlé du DLL Hidjacking dans un article précédent. Aujourd’hui, nous allons aller plus loin. Nous avions détourné la Bibliothèque LeafXnet.dll qui est des plus utilisée pour faire des requêtes web. Nous aurions pu utiliser une autre, comme Newtonsoft.Json.dll ou encore Colorful.Console.dll . Voici le résultat que nous avions la dernière fois :
Nous récupérions juste les requêtes pour les écrire dans un fichier texte.
Petit Rappel Le Dll Hidjacking consiste à modifier une bibliothèque appelée par un programme et ainsi ajouter du code exécuter.</description>
    </item>
    
    <item>
      <title>Writeup Crackity | TFC CTF 2021 | Catégorie reverse</title>
      <link>https://vozec.fr/writeups/crackity-tfc-ctf-2021/</link>
      <pubDate>Fri, 03 Dec 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/crackity-tfc-ctf-2021/</guid>
      <description>Unknown 2 | GrabCon CTF 2021 Fichier(s) Crackity.jar Nécessaires jd-gui Python3 Flag TFCCTF{j4v4_0bfusc4t10n_1s_pr3tty_n0t_pr3tty} Solution détaillée La solution n&amp;rsquo;est pas très longue mais elle permet d&amp;rsquo;introduire le reverse de fichier .jar avec un exemple assez basique.
Nous avons donc un fichier java à reverse pour trouver le Flag. J&amp;rsquo;ai d&amp;rsquo;abord essayé d&amp;rsquo;exécuter le fichier mais il semble cassé, et je ne peux le lancer.
root@DESKTOP-HNQJECB: /c ➜ java crackity.jar Error: Could not find or load main class crackity.</description>
    </item>
    
    <item>
      <title>TweetyBirb | KillerQueen 2021 | Catégorie Pwn</title>
      <link>https://vozec.fr/writeups/tweetybirb-killerqueenctf-2021/</link>
      <pubDate>Thu, 25 Nov 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/tweetybirb-killerqueenctf-2021/</guid>
      <description>TweetyBirb | KillerQueen 2021 Fichier(s) Tweetybirb Necessaires Netcat Python3 (+ pwntool) Flag kqctf{tweet_tweet_did_you_leak_or_bruteforce_..._plz_dont_say_you_tried_bruteforce} Solution détaillée Le but du challenge est de contourner une protection anti-smashing du binaire : Canary
Nous devons d&amp;rsquo;abord voir si un BOF est possible. Ici il n&amp;rsquo;y a que 2 input donc sans grande surprise, on trouve notre point d&amp;rsquo;entré :
Le but est de faire leak la protection Canary dans le premier input pour ensuite exploiter un Buffer Over Flow dans le second.</description>
    </item>
    
    <item>
      <title>Comment contourner le SSL Pinning sur android</title>
      <link>https://vozec.fr/articles/contourner-le-ssl-pinning-sur-android/</link>
      <pubDate>Thu, 04 Nov 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/contourner-le-ssl-pinning-sur-android/</guid>
      <description>Introduction Pour un projet personnel, j&amp;rsquo;ai dû récupérer une requête provenant d&amp;rsquo;une application de mon téléphone. Après de nombreuses recherches j&amp;rsquo;ai trouvé comment faire et j&amp;rsquo;ai compris toutes les méthodes pour y parvenir. La principale difficulté pour récupérer le traffic réseau de votre téléphone est de déchiffré les requêtes https.
HttpS , c&amp;rsquo;est quoi ? &amp;ldquo;HyperText Transfer Protocol Secure&amp;rdquo; est un Protocol qui succède à l&amp;rsquo;http . En effet il reprend l&amp;rsquo;http en y rajoutant une couche de chiffrement comme SSL ou TLS .</description>
    </item>
    
    <item>
      <title>I want to break free 1/2 | KillerQueen 2021 | Catégorie Pwn</title>
      <link>https://vozec.fr/writeups/python-jail-killerqueenctf-2021/</link>
      <pubDate>Mon, 01 Nov 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/python-jail-killerqueenctf-2021/</guid>
      <description>I want to break free 1/2 | KillerQueen 2021 Fichier(s) Jail blacklist.txt Necessaires Netcat Python3 Flag kqctf{0h_h0w_1_w4n7_70_br34k_fr33_2398d89vj3nsoicifh3bdoq1b39049v} Solution détaillée Le but du challenge est d&amp;rsquo;escape la jail python pour afficher le contenu d&amp;rsquo;un Fichier txt et d&amp;rsquo;avoir le flag.
Analyse de Jail.py #!/usr/bin/env python3 def server(): message = &amp;#34;&amp;#34;&amp;#34; You are in jail. Can you escape? &amp;#34;&amp;#34;&amp;#34; print(message) while True: try: data = input(&amp;#34;&amp;gt; &amp;#34;) safe = True for char in data: if not (ord(char)&amp;gt;=33 and ord(char)&amp;lt;=126): safe = False with open(&amp;#34;blacklist.</description>
    </item>
    
    <item>
      <title>Comment utiliser l&#39;OCR pour résoudre des captchas</title>
      <link>https://vozec.fr/articles/les-captchas-sont-inutiles-part3/</link>
      <pubDate>Fri, 29 Oct 2021 08:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/les-captchas-sont-inutiles-part3/</guid>
      <description>Introduction Dans des articles précédent, nous avons vu comment bypass 2 types de catpcha . Mais peut-on tous les bypass ? La réponse est oui à quelques exceptions près et nous allons voir comment.
Cet article complète les deux précédents et présente donc toutes les techniques que je connais pour contourner ces sécurité anti-bot
HCaptha Hcaptcha est un concurrent à google de plus en plus connu :
Il existe deux manières de le contourner :</description>
    </item>
    
    <item>
      <title>Comment Isoler un Recaptcha</title>
      <link>https://vozec.fr/articles/les-captchas-sont-inutiles-part2/</link>
      <pubDate>Thu, 28 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/les-captchas-sont-inutiles-part2/</guid>
      <description>Introduction Nous avons vu dans un précédent comment bypass les reCAPTCHA Silencieux ; ceux en arrière-plan . Mais comment faire quand ces captchas nécessitent une interaction Humaine à tout prix ? C&amp;rsquo;est ce que nous allons découvrir.
Le problème Dans un captcha Silencieux, il n&amp;rsquo;y pas d&amp;rsquo;interactions entre l&amp;rsquo;utilisateur et le captcha. On peut donc le contourner en simulant des actions identiques au script natif. Par contre, dans un captcha visible.</description>
    </item>
    
    <item>
      <title>Comment Bypass un Silent Recaptcha V3</title>
      <link>https://vozec.fr/articles/les-captchas-sont-inutiles-part1/</link>
      <pubDate>Wed, 27 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/les-captchas-sont-inutiles-part1/</guid>
      <description>Introduction Les Captchas sont partout, ce sont des petits programmes web qui servent à déterminer si leur interlocuteur est un Homme ou un Robot. Ce n&amp;rsquo;est pas très dérangeant pour les gens normaux mais cela devient ennuyeux pour les développeur qui souhaitent faire du scraping web ou juste se connecter à un service depuis le site-Web. Dans cet article nous nous concentrerons sur les Recaptcha de google et particulièrement ceux en mode Silent en version 2</description>
    </item>
    
    <item>
      <title>Pourquoi votre wifi est-il vulnérable</title>
      <link>https://vozec.fr/articles/pourquoi-votre-wifi-est-vuln%C3%A9rable/</link>
      <pubDate>Tue, 26 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/pourquoi-votre-wifi-est-vuln%C3%A9rable/</guid>
      <description>Introduction Je rappelle que le piratage d&amp;rsquo;un réseau dont vous n&amp;rsquo;êtes pas le propriétaire ou dont vous n&amp;rsquo;avez pas d&amp;rsquo;accord est strictement illégal. Je ne serais pas responsable des actions que vous ferrez après la lecture des cet article
La sécurité WPA2 (Wi-Fi Protected Access Version 2) est la sécurité la plus courante sur vos routeurs personnels. C&amp;rsquo;est à dire sur votre box internet personnelle. Il est pris en charge depuis 2005 sur Windows XP et il est encore utilisé de nos jours.</description>
    </item>
    
    <item>
      <title>Pourquoi il faut sécuriser vos DLL P1</title>
      <link>https://vozec.fr/articles/pourquoi-vous-devez-s%C3%A9curiser-vos-dll/</link>
      <pubDate>Mon, 25 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/pourquoi-vous-devez-s%C3%A9curiser-vos-dll/</guid>
      <description>Introduction Une DLL (Dynamic Link Library) est une bibliothèque logicielle qui permet le partage, par des programmes, de codes. Pour résumer, c&amp;rsquo;est une bibliothèque avec plusieurs fonctions à l&amp;rsquo;intérieur. C&amp;rsquo;est très utile pour ne pas toujours coder la même chose. On code une fois la DLL et on a plus qu&amp;rsquo;a appelé ses fonctions dans tous ses projets. L&amp;rsquo;avantage du C# est qu&amp;rsquo;il existe un grand nombre de bibliothèques, et la plupart sont Open-Source, sur GitHub principalement</description>
    </item>
    
    <item>
      <title>Comment Reverse du .Net facilement</title>
      <link>https://vozec.fr/articles/comment-reverse-du-.net-facilement/</link>
      <pubDate>Sun, 24 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/articles/comment-reverse-du-.net-facilement/</guid>
      <description>[//]: &amp;lt;&amp;gt; (Created By Vozec 23/10/2021) Nécessaires Ce pack complet pour l&amp;amp;rsquo;obfuscation C# Introduction .Net est un langage assez facile à reverse en général . Grâce à de simples outils comme JetBrain Dotpeek , DnSpy ou Ilspy , on peut facilement débugger , éditer , patcher un assembly sans soucis . La principale difficulté et la multitude de protection qui existe autour du Framework de Microsoft (.Net Framework/Core). Nous allons donc voir quelles sont les principales sécurités et comment les détourner .</description>
    </item>
    
    <item>
      <title>Writeup Unknown 2 | GrabCon 2021 | Catégorie reverse</title>
      <link>https://vozec.fr/writeups/unknown2-grabcon-ctf-2021/</link>
      <pubDate>Sun, 17 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://vozec.fr/writeups/unknown2-grabcon-ctf-2021/</guid>
      <description>Unknown 2 | GrabCon CTF 2021 Fichier(s) Unknow_2 Nécessaires Ghidra + Kali
Flag GrabCON{626C61636B647261676F6E} Solution détaillée La première chose que j’ai fait et de faire un ltrace mais cela n’a rien donné
J’ai donc fait : strings med_re_2 et en cherchant un petit peu j’ai trouvé ceci :
Si vous ne connaissez pas,UPX est un packer qui ici compresse le binaire . Nativement, le fichier ne peut pas être analysé avec ghidra .</description>
    </item>
    
  </channel>
</rss>
